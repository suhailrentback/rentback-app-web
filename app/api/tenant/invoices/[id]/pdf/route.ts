// app/api/tenant/invoices/[id]/pdf/route.ts
import { NextResponse } from "next/server";
import PDFDocument from "pdfkit";
import { createRouteSupabase } from "@/lib/supabase/server";

export const runtime = "nodejs";

function formatMoney(amount?: number, currency?: string) {
  const cur = currency || "PKR";
  const num = typeof amount === "number" ? amount : 0;
  try {
    return new Intl.NumberFormat("en-PK", { style: "currency", currency: cur }).format(num);
  } catch {
    return `${cur} ${num.toLocaleString()}`;
  }
}

export async function GET(
  _req: Request,
  { params }: { params: { id: string } }
) {
  const supabase = createRouteSupabase();

  // Pull a single invoice the current user is allowed to read (RLS enforced)
  const { data: invoice, error } = await supabase
    .from("invoices")
    .select(
      [
        "id",
        "number",
        "status",
        "amount",
        "currency",
        "due_date",
        "issued_at",
        "landlord_name",
        "landlord_email",
        "tenant_email"
      ].join(",")
    )
    .eq("id", params.id)
    .single();

  if (error || !invoice) {
    return NextResponse.json({ error: "Invoice not found" }, { status: 404 });
  }

  // Build a lightweight PDF
  const doc = new PDFDocument({ size: "A4", margin: 50 });
  const chunks: Buffer[] = [];
  doc.on("data", (c) => chunks.push(Buffer.isBuffer(c) ? c : Buffer.from(c)));
  const done = new Promise<void>((res) => doc.on("end", () => res()));

  // Header / brand
  doc
    .fontSize(18)
    .fillColor("#065f46")
    .text("RentBack — Invoice", { continued: false });
  doc.moveDown(0.5);
  doc
    .fontSize(10)
    .fillColor("#111827")
    .text(`Invoice #${invoice.number ?? invoice.id}`);
  doc.text(`Status: ${String(invoice.status).toUpperCase()}`);
  doc.text(`Issued: ${invoice.issued_at ? new Date(invoice.issued_at).toDateString() : "—"}`);
  doc.text(`Due: ${invoice.due_date ? new Date(invoice.due_date).toDateString() : "—"}`);
  doc.moveDown();

  // Parties
  doc.fontSize(12).fillColor("#111827").text("Billed To:");
  doc.fontSize(10).text(invoice.tenant_email ?? "—");
  doc.moveDown(0.5);

  doc.fontSize(12).text("From:");
  doc.fontSize(10).text(invoice.landlord_name || invoice.landlord_email || "—");
  doc.moveDown();

  // Amount
  const total = formatMoney(invoice.amount, invoice.currency);
  doc
    .fontSize(14)
    .fillColor("#111827")
    .text("Amount Due", { continued: true })
    .fillColor("#065f46")
    .text(`   ${total}`);
  doc.moveDown();

  // Footer
  doc
    .fontSize(9)
    .fillColor("#6b7280")
    .text("This invoice was generated by RentBack.");
  doc.end();

  await done;
  const pdf = Buffer.concat(chunks);

  return new NextResponse(pdf, {
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": `inline; filename="invoice-${invoice.number ?? invoice.id}.pdf"`
    }
  });
}
